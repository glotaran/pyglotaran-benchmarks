{"project": "pyglotaran", "project_url": "https://github.com/glotaran/pyglotaran", "show_commit_url": "https://github.com/glotaran/pyglotaran/commit/", "hash_length": 8, "revision_to_hash": {"281": "1c3c5439d437b17101fb361da7e0db94a4e1783a", "456": "d618e88c7bf0608de9b59756cbad85a0f553465b", "459": "9f15660e24a89d0cf0bc96ecefab1fae3d390ec1", "462": "d257dbab727470df01fac4fca6c7a2ad85799e88", "466": "05d9f8ac90dd59954a35ec2342b07a150cc0d9fa", "467": "b9632ecb4ac798fdcf5d78a2b75aaa0d3d9dcce9", "469": "a6c484f3a3df81dd06801af5c565967a8291fa0f", "471": "a81a785297cde8d47c6a08d15ef78bf4306eeda3", "473": "2662c4ce18d4ef3ec9d7d7f85cd4b0b3c7f99ccf", "475": "07ba32653a6761932c7edbb6da8450756a4a7e6a", "481": "724f69af290f8f4b777599ef0bd2724b11dfe979", "489": "826c412ba1e5ad3b3c1fe15626d0bf66bd146635", "611": "632ad4f92bd468510ea43a4ac8f5d1b2fdd707b6", "845": "4aae54ab712d9de5227eea39e54f47142efaf27e", "847": "9c895a1eeb2c479200e114bc0f15d8585c8f5584", "849": "ca5bcd2884ef945b93b56261f4ee5e096edc5b1a", "928": "d6c094133cff0f7c882b2d574a2b23827327492d", "962": "0ab31ad91c6dc64118f0377784469dc65e769ad5", "1010": "69b63ddd15dd25dd8fbcd26c6ffa8aab8e92daba", "1033": "73873f01d09a400e57ea8a2b903819fe1fff4efc", "1169": "e9aea7da149ff89f1313246cae995df48dcd4f66", "1205": "ba7fea620b32fa0e69527c38717b12063d3a8b6e", "1230": "5630279168b3f4f3d6eecc22adc24982fd214ae8", "1233": "c0d74d1fbd36f743b44e723650eba16cb6e56664", "1294": "24fcd336d35461b05e707ae72a155f7a7f7d10e2", "1363": "dc00e6da7b0f598dad9dd24ad490e063ddad9115", "1406": "21ba272a3f38c16b7b74b8275b9c7ee83632d2fe", "1460": "d05c042a6e4dffeac556d117f30a7b52f4e2b98f", "1474": "89046e0a95117d63336f5cdb637bf8acf52addb2", "1480": "0cb3b13d4541290b741b661fd7b618bf9bde0041", "1481": "96b42630ee9d0fb90630b0d69aa2b1fdc9724e42", "1553": "6c3c390e0a179c82a1bacf85a445455d1af00cb7", "1632": "8116af0e60c63349cafb309aeac631f64cf7fa8a", "1637": "84ba92dd2d404cc11be4267602df620fd81be782"}, "revision_to_date": {"281": 1528190494000, "456": 1533653187000, "459": 1533661714000, "462": 1533663100000, "466": 1533665507000, "467": 1533665937000, "469": 1533668565000, "471": 1533668624000, "473": 1533669024000, "475": 1533669476000, "481": 1533675539000, "489": 1533830192000, "611": 1542728460000, "845": 1571946103000, "847": 1572000718000, "849": 1572007433000, "928": 1574166068000, "962": 1574519655000, "1010": 1582595767000, "1033": 1592144495000, "1169": 1606869265000, "1205": 1613035241000, "1230": 1614530862000, "1233": 1614535902000, "1294": 1616098997000, "1363": 1624653720000, "1406": 1631047910000, "1460": 1635085838000, "1474": 1638399612000, "1480": 1640984193000, "1481": 1640989093000, "1553": 1654550620000, "1632": 1668288602000, "1637": 1668298111000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz"], "machine": ["gh_action"], "num_cpu": ["2"], "os": ["Linux 5.8.0-1033-azure"], "ram": ["7GB"], "python": ["3.10"], "branch": ["HEAD"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz", "machine": "gh_action", "num_cpu": "2", "os": "Linux 5.8.0-1033-azure", "ram": "7GB", "python": "3.10", "branch": "HEAD"}], "benchmarks": {"BenchmarkOptimize.time_optimize": {"code": "class BenchmarkOptimize:\n    def time_optimize(self, index_dependent, grouped, weight):\n        optimize(self.scheme)\n\n    def setup(self, index_dependent, grouped, weight):\n        suite = MultichannelMulticomponentDecay\n        model = suite.model\n        # 0.4.0 API compat\n        model.is_grouped = grouped\n    \n        model.megacomplex[\"m1\"].is_index_dependent = index_dependent\n    \n        sim_model = suite.sim_model\n        suite.sim_model.megacomplex[\"m1\"].is_index_dependent = index_dependent\n    \n        wanted_parameters = suite.wanted_parameters\n    \n        initial_parameters = suite.initial_parameters\n        model.dataset[\"dataset1\"].fill(model, initial_parameters)\n    \n        if hasattr(suite, \"global_axis\"):\n            axes_dict = {\n                \"global\": getattr(suite, \"global_axis\"),\n                \"model\": getattr(suite, \"model_axis\"),\n            }\n        else:\n            # 0.4.0 API compat\n            axes_dict = {\n                \"e\": getattr(suite, \"e_axis\"),\n                \"c\": getattr(suite, \"c_axis\"),\n            }\n    \n        dataset = simulate(sim_model, \"dataset1\", wanted_parameters, axes_dict)\n    \n        if weight:\n            dataset[\"weight\"] = xr.DataArray(\n                np.ones_like(dataset.data) * 0.5, coords=dataset.data.coords\n            )\n    \n        data = {\"dataset1\": dataset}\n    \n        self.scheme = Scheme(\n            model=model,\n            parameters=initial_parameters,\n            data=data,\n            maximum_number_function_evaluations=10,\n            group_tolerance=0.1,\n            optimization_method=\"TrustRegionReflection\",\n        )\n        # 0.4.0 API compat\n        if hasattr(self.scheme, \"group\"):\n            self.scheme.group = grouped", "min_run_count": 2, "name": "BenchmarkOptimize.time_optimize", "number": 0, "param_names": ["index_dependent", "grouped", "weight"], "params": [["True", "False"], ["True", "False"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "1560762892c2d46b8de6b3fadeeb3450c70877cb113d447b9f710a6141cf83e5", "warmup_time": -1}, "IntegrationTwoDatasets.peakmem_optimize": {"code": "class IntegrationTwoDatasets:\n    def peakmem_optimize(self):\n        optimize(self.scheme)\n\n    def setup(self):\n        dataset1 = load_dataset(SCRIPT_DIR / \"data/data1.ascii\")\n        dataset2 = load_dataset(SCRIPT_DIR / \"data/data2.ascii\")\n        parameters = load_parameters(str(SCRIPT_DIR / \"models/parameters.yml\"))\n        addition_kwargs = {}\n        if int(__version__.split(\".\")[1]) < 7:\n            model = load_model(str(SCRIPT_DIR / \"models/model_lt_0.7.0.yml\"))\n            addition_kwargs[\"non_negative_least_squares\"] = True\n        else:\n            model = load_model(str(SCRIPT_DIR / \"models/model.yml\"))\n        self.scheme = Scheme(\n            model,\n            parameters,\n            {\"dataset1\": dataset1, \"dataset2\": dataset2},\n            maximum_number_function_evaluations=11,\n            optimization_method=\"TrustRegionReflection\",\n            **addition_kwargs,\n        )", "name": "IntegrationTwoDatasets.peakmem_optimize", "param_names": [], "params": [], "timeout": 300, "type": "peakmemory", "unit": "bytes", "version": "dd51208102b050544e77980718001a24ff24f8ec7de7a0ae92abdbbba7a45660"}, "IntegrationTwoDatasets.time_optimize": {"code": "class IntegrationTwoDatasets:\n    def time_optimize(self):\n        optimize(self.scheme)\n\n    def setup(self):\n        dataset1 = load_dataset(SCRIPT_DIR / \"data/data1.ascii\")\n        dataset2 = load_dataset(SCRIPT_DIR / \"data/data2.ascii\")\n        parameters = load_parameters(str(SCRIPT_DIR / \"models/parameters.yml\"))\n        addition_kwargs = {}\n        if int(__version__.split(\".\")[1]) < 7:\n            model = load_model(str(SCRIPT_DIR / \"models/model_lt_0.7.0.yml\"))\n            addition_kwargs[\"non_negative_least_squares\"] = True\n        else:\n            model = load_model(str(SCRIPT_DIR / \"models/model.yml\"))\n        self.scheme = Scheme(\n            model,\n            parameters,\n            {\"dataset1\": dataset1, \"dataset2\": dataset2},\n            maximum_number_function_evaluations=11,\n            optimization_method=\"TrustRegionReflection\",\n            **addition_kwargs,\n        )", "min_run_count": 2, "name": "IntegrationTwoDatasets.time_optimize", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "8eab061a0b77c818415ddf03d1e998d6aeb84505258f3017b5e40f0f5bec3ca0", "warmup_time": -1}}, "machines": {"gh_action": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz", "machine": "gh_action", "num_cpu": "2", "os": "Linux 5.8.0-1033-azure", "ram": "7GB", "version": 1}}, "tags": {"0.0.1": 281, "v0.0.10": 611, "v0.0.11": 845, "v0.0.12": 847, "v0.0.13": 849, "v0.0.14": 928, "v0.0.15": 962, "v0.0.16": 1010, "v0.0.3": 456, "v0.0.39": 467, "v0.0.4": 459, "v0.0.40": 469, "v0.0.41": 471, "v0.0.42": 473, "v0.0.43": 475, "v0.0.5": 462, "v0.0.6": 481, "v0.0.7": 466, "v0.0.8": 489, "v0.1.0": 1033, "v0.2.0": 1169, "v0.3.0": 1205, "v0.3.1": 1230, "v0.3.2": 1233, "v0.3.3": 1294, "v0.4.0": 1363, "v0.4.1": 1406, "v0.4.2": 1480, "v0.5.0": 1474, "v0.5.0rc1": 1460, "v0.5.1": 1481, "v0.6.0": 1553}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}